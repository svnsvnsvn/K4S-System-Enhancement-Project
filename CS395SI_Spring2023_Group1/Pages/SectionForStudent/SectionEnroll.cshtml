@page
@model CS395SI_Spring2023_Group1.Pages.SectionForStudent.SectionEnrollModel

@{
    ViewData["Title"] = "SectionEnroll";
}
<h1>
Sections for @Html.DisplayFor(model => model.Spring2024_Group2_Sections.FirstOrDefault().serviceName)
</h1> 
@*
<p>
    There may be a discrepency between the service selected and the name displayed.
    This occurs in the Database. Our (2024_Group2) sections do not match the service IDs
    given in the table where we pull the services from (2023_Group1)
</p>
*@
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Spring2024_Group2_Sections[0].serviceID)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Spring2024_Group2_Sections[0].serviceName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Spring2024_Group2_Sections[0].StartDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Spring2024_Group2_Sections[0].EndDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Spring2024_Group2_Sections[0].weekDay)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Spring2024_Group2_Sections[0].startTime)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Spring2024_Group2_Sections[0].endTime)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Spring2024_Group2_Sections[0].status)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@{
    var enrolledSections = ViewData["EnrolledSections"] as List<int> ?? new List<int>();
}

@foreach (var item in Model.Spring2024_Group2_Sections)
{
    bool isEnrolled = enrolledSections.Contains(item.sectionID);
    
    <tr>
        <td>@Html.DisplayFor(modelItem => item.serviceID)</td>
        <td>@Html.DisplayFor(modelItem => item.serviceName)</td>
        <td>@Html.DisplayFor(modelItem => item.StartDate)</td>
        <td>@Html.DisplayFor(modelItem => item.EndDate)</td>
        <td>@Html.DisplayFor(modelItem => item.weekDay)</td>
        <td>@Html.DisplayFor(modelItem => item.startTime)</td>
        <td>@Html.DisplayFor(modelItem => item.endTime)</td>
        <td>@Html.DisplayFor(modelItem => item.status)</td>
        <td>
            <form method="post" class="enroll-form">
                <input type="hidden" name="sectionID" value="@item.sectionID" />
                <input type="hidden" name="serviceID" value="@item.serviceID" />
                <input type="hidden" name="serviceName" value="@item.serviceName" />
                <input type="hidden" name="StartDate" value="@item.StartDate" />
                <input type="hidden" name="EndDate" value="@item.EndDate" />
                <input type="hidden" name="weekDay" value="@item.weekDay" />
                <input type="hidden" name="startTime" value="@item.startTime" />
                <input type="hidden" name="endTime" value="@item.endTime" />
                <input type="hidden" name="status" value="@item.status" />

                <button type="submit"
                    class="enroll-button"
                    style="background-color: @(isEnrolled ? "#ccc" : "#007bff"); color: white;"
                    @(isEnrolled ? "disabled" : "")>
                    @(isEnrolled ? "Enrolled" : "Enroll")
                </button>
            </form>
        </td>
    </tr>
}
</tbody>
<script>
document.addEventListener("DOMContentLoaded", function () {
    document.querySelectorAll(".enroll-form").forEach(form => {
        form.addEventListener("submit", function (event) {
            event.preventDefault(); 

            let formData = new FormData(this);
            let button = this.querySelector(".enroll-button"); 

            fetch(window.location.href, {
                method: "POST",
                body: formData,
                headers: { "X-Requested-With": "XMLHttpRequest" }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    button.textContent = "Enrolled";
                    button.disabled = true;
                    button.style.backgroundColor = "#ccc";
                } else {
                    alert(data.message);
                }
            })
            .catch(error => {
                console.error("Error:", error);
                alert("Network error. Please try again.");
            });
        });
    });
});
</script>
